---
kind: Template
apiVersion: v1
metadata:
  name: eodc-service-job
  annotations:
    description: EODC Job Service
    iconClass: icon-python
labels:
  service: eodc-service-job
  provider: eodc
  project: eodc-services
  version: 0.0.1

parameters:
# Service
- name: SERVICE_NAME
  displayName: Service Name
  description: Name of the service
  value: eodc-service-job
  required: true
- name: SERVICE_SETTINGS
  displayName: Service Config Setting
  description: Setting for the EODC Job Service
  value: service.config.ProductionConfig
  required: true
- name: MEMORY_LIMIT_SERVICE
  displayName: Memory Limit
  description: Maximum amount of memory the service can use.
  value: 256Mi
  required: true

# GIT
- name: GIT_URI
  displayName: Git URI
  description: Git source URI for service
  value: git@git.eodc.eu:eodc-services/eodc-service-job.git
  required: true
- name: GIT_REF
  displayName: Git Reference
  description: Git branch/tag reference
  value: master
  required: true
- name: GIT_SECRET
  displayName: Git Secret
  description: Deployment secret for accessing GitLab
  value: eodc-builder
  required: true
- name: GITLAB_SECRET
  displayName: Gitlab Trigger Secret
  description: Secret for Gitlab trigger hock
  from: "[a-zA-Z0-9]{10}"
  generate: expression
  required: true

objects:

# SERVICE
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: "${SERVICE_NAME}"
  spec:
    dockerImageRepository:
    tags:
    - name: latest

- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: "${SERVICE_NAME}"
  spec:
    source:
      type: Git
      git:
        uri: "${GIT_URI}"
        ref: "${GIT_REF}"
      sourceSecret:
        name: "${GIT_SECRET}"
    strategy:
      dockerStrategy:
        dockerfilePath: Dockerfile
    output:
      to:
        kind: ImageStreamTag
        name: "${SERVICE_NAME}:latest"
    triggers:
    - type: GitLab
      gitlab:
        secret: "${GITLAB_SECRET}"
    - type: ConfigChange
    - type: ImageChange
      imageChange:

- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${SERVICE_NAME}"
    labels:
      name: "${SERVICE_NAME}"
  spec:
    strategy:
      type: Recreate
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - "${SERVICE_NAME}"
        from:
          kind: ImageStreamTag
          name: "${SERVICE_NAME}:latest"
    - type: ConfigChange
    replicas: 1
    selector:
      name: "${SERVICE_NAME}"
    template:
      metadata:
        labels:
          name: "${SERVICE_NAME}"
      spec:
        containers:
        - name: "${SERVICE_NAME}"
          image: "${SERVICE_NAME}"
          ports:
          - containerPort: 5000
            protocol: TCP
          readinessProbe:
            httpGet:
              path: "/ping"
              port: 5000
          livenessProbe:
            timeoutSeconds: 1
            initialDelaySeconds: 30
            tcpSocket:
              port: 5000
          env:
          - name: SERVICE_SETTINGS
            value: "${SERVICE_SETTINGS}"
          resources:
            limits:
              memory: "${MEMORY_LIMIT_SERVICE}"
          terminationMessagePath: "/dev/termination-log"
          imagePullPolicy: Always
          securityContext:
            capabilities:
            privileged: false
        restartPolicy: Always
        dnsPolicy: ClusterFirst

- kind: Route
  apiVersion: v1
  metadata:
    name: "${SERVICE_NAME}"
    annotations:
      description: The Route for the service
  spec:
    to:
      kind: Service
      name: "${SERVICE_NAME}"

- kind: Service
  apiVersion: v1
  metadata:
    name: "${SERVICE_NAME}"
    annotations:
      description: The service port
  spec:
    ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000
    selector:
      name: "${SERVICE_NAME}"