---
kind: Template
apiVersion: v1
metadata:
  name: openeo
  annotations:
    openshift.io/display-name: openeo
    description: >-
      The templates instantiates the OpenEO implementation on based on OpenShift Origin.
    openshift.io/long-description: >-
      Multiple services are setup to provide the OpenEO capabilities. For setting up a
      OpenShift cluster and configure persitant storage please read the OpenShift documentation.
      Fur further information on OpenEO please have a look at http://openeo.org
    tags: openeo, openshift, python, flask
    iconClass: icon-python
labels:
  provider: openeo
  project: openeo
  app: openeo
  version: 0.0.1
message: "The openEO template will be instantiated soon." 

parameters:
- name: SERVICE_PREFIX
  displayName: Service Prefix
  description: The prefix for service instantiation
  value: openeo
  required: true
- name: SERVICE_SETTINGS
  displayName: Service Config Setting
  description: Settings for the OpenEO Services (Production, Development, Testing)
  value: service.config.ProductionConfig
  required: true
- name: MEMORY_LIMIT_SERVICE
  displayName: Memory Limit
  description: Maximum amount of memory the services can use.
  value: 256Mi
  required: true
- name: EXECUTION_NAMESPACE
  displayName: Job Execution Namespace
  description: Namspace of OpenSHift project for job execution (e.g. "execution-environment")
  value:
  required: true
- name: SERVICEACCOUNT_TOKEN
  displayName: Service Account Token
  description: Permanent token of the service account in execution namespace
  value:
  required: true
- name: STORAGE_CLASS_NAME
  displayName: Storage Class Name
  description: Storage class for PersitantVolumeClaims and the databases that should be used (e.g. "storage-write")
  value:
  required: true
- name: OPENEO_API_HOST
  displayName: OpenEO API URI
  description: URI for accessing the OpenEO API (e.g. openeo.example.com)
  value:
  required: true
- name: OPENSHIFT_API_URI
  displayName: OpenShift API URI
  description: Routing URI for accessing the OpenShift API (e.g. http://openshift.example.com)
  value:
  required: true
- name: CSW_SERVER
  displayName: CSW Server URI
  description: URI for accessing CSW server (e.g. http://csw.example.com)
  value:
  required: true
- name: SECRET_BCRYPT
  displayName: BCrypt Secret
  description: Secret for encrypting/decrypting passwords
  from: "[a-zA-Z0-9]{16}"
  generate: expression
  required: true
- name: GIT_URI
  displayName: Git URI
  description: Git source URI for OpenEO
  value: git@github.com:Open-EO/openeo-openshift-driver.git
  required: true
- name: GIT_REF
  displayName: Git Reference for OpenEO
  description: Git branch/tag reference
  value: master
  required: true
- name: POSTGRESQL_USER
  displayName: PostgreSQL Connection Username
  description: Username for PostgreSQL user that will be used for accessing the databases.
  generate: expression
  from: user[A-Z0-9]{3}
  required: true
- name: POSTGRESQL_PASSWORD
  displayName: PostgreSQL Connection Password
  description: Password for the PostgreSQL connection user.
  generate: expression
  from: "[a-zA-Z0-9]{16}"
  required: true
- name: POSTGRESQL_VERSION
  displayName: Version of PostgreSQL Image
  description: Version of PostgreSQL image to be used (9.2, 9.4, 9.5 or latest).
  value: '9.5'
  required: true
- name: JOBS_DATABASE
  displayName: PostgreSQL Database Name
  description: Name of the PostgreSQL database accessed.
  value: jobs
  required: true
- name: PROCESSES_DATABASE
  displayName: PostgreSQL Database Name
  description: Name of the PostgreSQL database accessed.
  value: processes
  required: true
- name: USERS_DATABASE
  displayName: PostgreSQL Database Name
  description: Name of the PostgreSQL database accessed.
  value: users
  required: true
- name: VOLUME_CAPACITY_POSTGRES
  displayName: Volume Capacity
  description: Volume space available for Postgres data, e.g. 512Mi, 2Gi.
  value: 5Gi
  required: true
- name: MEMORY_LIMIT_POSTGRES
  displayName: Memory Limit
  description: Maximum amount of memory Postgres can use.
  value: 256Mi
  required: true

objects:

# OPENEO JOB SERVICE
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: "${SERVICE_PREFIX}-job"
  spec:
    dockerImageRepository:
    tags:
    - name: latest
- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: "${SERVICE_PREFIX}-job"
  spec:
    source:
      type: Git
      git:
        uri: "${GIT_URI}"
        ref: "${GIT_REF}"
      contextDir: "services/job"
    strategy:
      dockerStrategy:
        dockerfilePath: Dockerfile
    output:
      to:
        kind: ImageStreamTag
        name: "${SERVICE_PREFIX}-job:latest"
    triggers:
    - type: GitLab
      gitlab:
        secret: "${GITLAB_SECRET}"
    - type: ConfigChange
    - type: ImageChange
      imageChange:
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${SERVICE_PREFIX}-job"
    labels:
      name: "${SERVICE_PREFIX}-job"
  spec:
    selector:
      name: "${SERVICE_PREFIX}-job"
    strategy:
      type: Recreate
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - "${SERVICE_PREFIX}-job"
        from:
          kind: ImageStreamTag
          name: "${SERVICE_PREFIX}-job:latest"
    - type: ConfigChange
    replicas: 1
    template:
      metadata:
        labels:
          name: "${SERVICE_PREFIX}-job"
      spec:
        containers:
        - name: "${SERVICE_PREFIX}-job"
          image: "${SERVICE_PREFIX}-job"
          ports:
          - containerPort: 5000
            protocol: TCP
          readinessProbe:
            httpGet:
              path: "/health"
              port: 5000
          livenessProbe:
            timeoutSeconds: 1
            initialDelaySeconds: 30
            tcpSocket:
              port: 5000
          env:
          - name: SERVICE_SETTINGS
            value: "${SERVICE_SETTINGS}"
          - name: DATABASE_URL
            value: "postgres://${POSTGRESQL_USER}:${POSTGRESQL_PASSWORD}@${SERVICE_PREFIX}-job-postgres:5432/${JOBS_DATABASE}"
          - name: EXECUTION_NAMESPACE
            value: "${EXECUTION_NAMESPACE}"
          - name: STORAGE_CLASS_NAME
            value: "${STORAGE_CLASS_NAME}"
          - name: SERVICEACCOUNT_TOKEN
            value: "${SERVICEACCOUNT_TOKEN}"
          - name: OPENEO_API_HOST
            value: "${OPENEO_API_HOST}"
          - name: OPENSHIFT_API_URI
            value: "${OPENSHIFT_API_URI}"
          - name: CSW_SERVER
            value: "${CSW_SERVER}"
          - name: VERIFY
            value: "false"
          resources:
            limits:
              memory: "${MEMORY_LIMIT_SERVICE}"
          terminationMessagePath: "/dev/termination-log"
          imagePullPolicy: Always
          securityContext:
            capabilities:
            privileged: false
        restartPolicy: Always
        dnsPolicy: ClusterFirst
- kind: Route
  apiVersion: v1
  metadata:
    name: "openeo-service-job"
    annotations:
      description: openEO /jobs route
  spec:
    host: "${OPENEO_API_HOST}"
    path: /jobs
    to:
      kind: Service
      name: "${SERVICE_PREFIX}-job"
- kind: Service
  apiVersion: v1
  metadata:
    name: "${SERVICE_PREFIX}-job"
    labels:
      app: ${SERVICE_PREFIX}-job
  spec:
    ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000
    selector:
      app: "${SERVICE_PREFIX}-job"
      deploymentconfig: "${SERVICE_PREFIX}-job"

# OPENEO JOB DATABASE
- kind: Secret
  apiVersion: v1
  metadata:
    name: "${SERVICE_PREFIX}-job-postgres"
  stringData:
    database-user: "${POSTGRESQL_USER}"
    database-password: "${POSTGRESQL_PASSWORD}"
    database-name: "${JOBS_DATABASE}"
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${SERVICE_PREFIX}-job-postgres"
    annotations:
      template.alpha.openshift.io/wait-for-ready: 'true'
  spec:
    strategy:
      type: Recreate
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - postgresql
        from:
          kind: ImageStreamTag
          name: "postgresql:${POSTGRESQL_VERSION}"
          namespace: openshift
        lastTriggeredImage:
    - type: ConfigChange
    replicas: 1
    selector:
      name: "${SERVICE_PREFIX}-job-postgres"
    template:
      metadata:
        labels:
          name: "${SERVICE_PREFIX}-job-postgres"
      spec:
        containers:
        - name: postgresql
          image:
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            timeoutSeconds: 1
            initialDelaySeconds: 5
            exec:
              command:
              - "/bin/sh"
              - "-i"
              - "-c"
              - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c
                'SELECT 1'
          livenessProbe:
            timeoutSeconds: 1
            initialDelaySeconds: 30
            tcpSocket:
              port: 5432
          env:
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                name: "${SERVICE_PREFIX}-job-postgres"
                key: database-user
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "${SERVICE_PREFIX}-job-postgres"
                key: database-password
          - name: POSTGRESQL_DATABASE
            valueFrom:
              secretKeyRef:
                name: "${SERVICE_PREFIX}-job-postgres"
                key: database-name
          resources:
            limits:
              memory: "${MEMORY_LIMIT_POSTGRES}"
          volumeMounts:
          - name: vol-${SERVICE_PREFIX}-job-postgres
            mountPath: "/var/lib/pgsql/data"
          terminationMessagePath: "/dev/termination-log"
          imagePullPolicy: IfNotPresent
        volumes:
        - name: vol-${SERVICE_PREFIX}-job-postgres
          persistentVolumeClaim:
            claimName: pvc-${SERVICE_PREFIX}-job-postgres
        restartPolicy: Always
        dnsPolicy: ClusterFirst
- kind: Service
  apiVersion: v1
  metadata:
    name: "${SERVICE_PREFIX}-job-postgres"
  spec:
    ports:
    - name: postgresql
      protocol: TCP
      port: 5432
      targetPort: 5432
    selector:
      name: "${SERVICE_PREFIX}-job-postgres"
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: pvc-${SERVICE_PREFIX}-job-postgres
  spec:
    storageClassName: "${STORAGE_CLASS_NAME}"
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: "${VOLUME_CAPACITY_POSTGRES}"

# OPENEO DATA SERVICE
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: "${SERVICE_PREFIX}-data"
  spec:
    dockerImageRepository:
    tags:
    - name: latest
- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: "${SERVICE_PREFIX}-data"
  spec:
    source:
      type: Git
      git:
        uri: "${GIT_URI}"
        ref: "${GIT_REF}"
      contextDir: "services/data"
    strategy:
      dockerStrategy:
        dockerfilePath: Dockerfile
    output:
      to:
        kind: ImageStreamTag
        name: "${SERVICE_PREFIX}-data:latest"
    triggers:
    - type: GitLab
      gitlab:
        secret: "${GITLAB_SECRET}"
    - type: ConfigChange
    - type: ImageChange
      imageChange:
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${SERVICE_PREFIX}-data"
    labels:
      name: "${SERVICE_PREFIX}-data"
  spec:
    strategy:
      type: Recreate
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - "${SERVICE_PREFIX}-data"
        from:
          kind: ImageStreamTag
          name: "${SERVICE_PREFIX}-data:latest"
    - type: ConfigChange
    replicas: 1
    selector:
      name: "${SERVICE_PREFIX}-data"
    template:
      metadata:
        labels:
          name: "${SERVICE_PREFIX}-data"
      spec:
        containers:
        - name: "${SERVICE_PREFIX}-data"
          image: "${SERVICE_PREFIX}-data"
          ports:
          - containerPort: 5000
            protocol: TCP
          readinessProbe:
            httpGet:
              path: "/health"
              port: 5000
          livenessProbe:
            timeoutSeconds: 1
            initialDelaySeconds: 30
            tcpSocket:
              port: 5000
          env:
          - name: SERVICE_SETTINGS
            value: "${SERVICE_SETTINGS}"
          resources:
            limits:
              memory: "${MEMORY_LIMIT_SERVICE}"
          terminationMessagePath: "/dev/termination-log"
          imagePullPolicy: Always
          securityContext:
            capabilities:
            privileged: false
        restartPolicy: Always
        dnsPolicy: ClusterFirst
- kind: Route
  apiVersion: v1
  metadata:
    name: "openeo-service-data"
    annotations:
      description: openEO /data route
  spec:
    host: "${OPENEO_API_HOST}"
    path: /data
    to:
      kind: Service
      name: "${SERVICE_PREFIX}-data"
- kind: Service
  apiVersion: v1
  metadata:
    name: "${SERVICE_PREFIX}-data"
    annotations:
      description: The service port
  spec:
    ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000
    selector:
      name: "${SERVICE_PREFIX}-data"

# OPENEO USER SERVICE
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: "${SERVICE_PREFIX}-user"
  spec:
    dockerImageRepository:
    tags:
    - name: latest
- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: "${SERVICE_PREFIX}-user"
  spec:
    source:
      type: Git
      git:
        uri: "${GIT_URI}"
        ref: "${GIT_REF}"
      contextDir: "services/user"
    strategy:
      dockerStrategy:
        dockerfilePath: Dockerfile
    output:
      to:
        kind: ImageStreamTag
        name: "${SERVICE_PREFIX}-user:latest"
    triggers:
    - type: GitLab
      gitlab:
        secret: "${GITLAB_SECRET}"
    - type: ConfigChange
    - type: ImageChange
      imageChange:
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${SERVICE_PREFIX}-user"
    labels:
      name: "${SERVICE_PREFIX}-user"
  spec:
    strategy:
      type: Recreate
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - "${SERVICE_PREFIX}-user"
        from:
          kind: ImageStreamTag
          name: "${SERVICE_PREFIX}-user:latest"
    - type: ConfigChange
    replicas: 1
    selector:
      name: "${SERVICE_PREFIX}-user"
    template:
      metadata:
        labels:
          name: "${SERVICE_PREFIX}-user"
      spec:
        containers:
        - name: "${SERVICE_PREFIX}-user"
          image: "${SERVICE_PREFIX}-user"
          ports:
          - containerPort: 5000
            protocol: TCP
          readinessProbe:
            httpGet:
              path: "/health"
              port: 5000
          livenessProbe:
            timeoutSeconds: 1
            initialDelaySeconds: 30
            tcpSocket:
              port: 5000
          env:
          - name: SERVICE_SETTINGS
            value: "${SERVICE_SETTINGS}"
          - name: DATABASE_URL
            value: "postgres://${POSTGRESQL_USER}:${POSTGRESQL_PASSWORD}@${SERVICE_PREFIX}-user-postgres:5432/${USERS_DATABASE}"
          - name: SECRET_BCRYPT
            value: "${SECRET_BCRYPT}"
          resources:
            limits:
              memory: "${MEMORY_LIMIT_SERVICE}"
          terminationMessagePath: "/dev/termination-log"
          imagePullPolicy: Always
          securityContext:
            capabilities:
            privileged: false
        restartPolicy: Always
        dnsPolicy: ClusterFirst
- kind: Route
  apiVersion: v1
  metadata:
    name: "openeo-service-user"
    annotations:
      description: openEO /users route
  spec:
    host: "${OPENEO_API_HOST}"
    path: /users
    to:
      kind: Service
      name: "${SERVICE_PREFIX}-user"
- kind: Service
  apiVersion: v1
  metadata:
    name: "${SERVICE_PREFIX}-user"
    annotations:
      description: The service port
  spec:
    ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000
    selector:
      name: "${SERVICE_PREFIX}-user"

# OPENEO USER DATABASE
- kind: Secret
  apiVersion: v1
  metadata:
    name: "${SERVICE_PREFIX}-user-postgres"
  stringData:
    database-user: "${POSTGRESQL_USER}"
    database-password: "${POSTGRESQL_PASSWORD}"
    database-name: "${USERS_DATABASE}"
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${SERVICE_PREFIX}-user-postgres"
    annotations:
      template.alpha.openshift.io/wait-for-ready: 'true'
  spec:
    strategy:
      type: Recreate
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - postgresql
        from:
          kind: ImageStreamTag
          name: "postgresql:${POSTGRESQL_VERSION}"
          namespace: openshift
        lastTriggeredImage:
    - type: ConfigChange
    replicas: 1
    selector:
      name: "${SERVICE_PREFIX}-user-postgres"
    template:
      metadata:
        labels:
          name: "${SERVICE_PREFIX}-user-postgres"
      spec:
        containers:
        - name: postgresql
          image:
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            timeoutSeconds: 1
            initialDelaySeconds: 5
            exec:
              command:
              - "/bin/sh"
              - "-i"
              - "-c"
              - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c
                'SELECT 1'
          livenessProbe:
            timeoutSeconds: 1
            initialDelaySeconds: 30
            tcpSocket:
              port: 5432
          env:
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                name: "${SERVICE_PREFIX}-user-postgres"
                key: database-user
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "${SERVICE_PREFIX}-user-postgres"
                key: database-password
          - name: POSTGRESQL_DATABASE
            valueFrom:
              secretKeyRef:
                name: "${SERVICE_PREFIX}-user-postgres"
                key: database-name
          resources:
            limits:
              memory: "${MEMORY_LIMIT_POSTGRES}"
          volumeMounts:
          - name: vol-${SERVICE_PREFIX}-user-postgres
            mountPath: "/var/lib/pgsql/data"
          terminationMessagePath: "/dev/termination-log"
          imagePullPolicy: IfNotPresent
        volumes:
        - name: vol-${SERVICE_PREFIX}-user-postgres
          persistentVolumeClaim:
            claimName: pvc-${SERVICE_PREFIX}-user-postgres
        restartPolicy: Always
        dnsPolicy: ClusterFirst
- kind: Service
  apiVersion: v1
  metadata:
    name: "${SERVICE_PREFIX}-user-postgres"
  spec:
    ports:
    - name: postgresql
      protocol: TCP
      port: 5432
      targetPort: 5432
    selector:
      name: "${SERVICE_PREFIX}-user-postgres"
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: pvc-${SERVICE_PREFIX}-user-postgres
  spec:
    storageClassName: "${STORAGE_CLASS_NAME}"
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: "${VOLUME_CAPACITY_POSTGRES}"

# OPENEO PROCESS SERVICE
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: "${SERVICE_PREFIX}-process"
  spec:
    dockerImageRepository:
    tags:
    - name: latest
- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: "${SERVICE_PREFIX}-process"
  spec:
    source:
      type: Git
      git:
        uri: "${GIT_URI}"
        ref: "${GIT_REF}"
      contextDir: "services/processes"
    strategy:
      dockerStrategy:
        dockerfilePath: Dockerfile
    output:
      to:
        kind: ImageStreamTag
        name: "${SERVICE_PREFIX}-process:latest"
    triggers:
    - type: GitLab
      gitlab:
        secret: "${GITLAB_SECRET}"
    - type: ConfigChange
    - type: ImageChange
      imageChange:
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${SERVICE_PREFIX}-process"
    labels:
      name: "${SERVICE_PREFIX}-process"
  spec:
    strategy:
      type: Recreate
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - "${SERVICE_PREFIX}-process"
        from:
          kind: ImageStreamTag
          name: "${SERVICE_PREFIX}-process:latest"
    - type: ConfigChange
    replicas: 1
    selector:
      name: "${SERVICE_PREFIX}-process"
    template:
      metadata:
        labels:
          name: "${SERVICE_PREFIX}-process"
      spec:
        containers:
        - name: "${SERVICE_PREFIX}-process"
          image: "${SERVICE_PREFIX}-process"
          ports:
          - containerPort: 5000
            protocol: TCP
          readinessProbe:
            httpGet:
              path: "/health"
              port: 5000
          livenessProbe:
            timeoutSeconds: 1
            initialDelaySeconds: 30
            tcpSocket:
              port: 5000
          env:
          - name: SERVICE_SETTINGS
            value: "${SERVICE_SETTINGS}"
          - name: DATABASE_URL
            value: "postgres://${POSTGRESQL_USER}:${POSTGRESQL_PASSWORD}@${SERVICE_PREFIX}-process-postgres:5432/${JOBS_DATABASE}"
          - name: OPENEO_API_HOST
            value: "${OPENEO_API_HOST}"
          resources:
            limits:
              memory: "${MEMORY_LIMIT_SERVICE}"
          terminationMessagePath: "/dev/termination-log"
          imagePullPolicy: Always
          securityContext:
            capabilities:
            privileged: false
        restartPolicy: Always
        dnsPolicy: ClusterFirst
- kind: Route
  apiVersion: v1
  metadata:
    name: "openeo-service-process"
    annotations:
      description: openEO /processes route
  spec:
    host: "${OPENEO_API_HOST}"
    path: /processes
    to:
      kind: Service
      name: "${SERVICE_PREFIX}-process"
- kind: Service
  apiVersion: v1
  metadata:
    name: "${SERVICE_PREFIX}-process"
    annotations:
      description: The service port
  spec:
    ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000
    selector:
      name: "${SERVICE_PREFIX}-process"

# OPENEO PROCESS DATABASE
- kind: Secret
  apiVersion: v1
  metadata:
    name: "${SERVICE_PREFIX}-process-postgres"
  stringData:
    database-user: "${POSTGRESQL_USER}"
    database-password: "${POSTGRESQL_PASSWORD}"
    database-name: "${JOBS_DATABASE}"
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${SERVICE_PREFIX}-process-postgres"
    annotations:
      template.alpha.openshift.io/wait-for-ready: 'true'
  spec:
    strategy:
      type: Recreate
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - postgresql
        from:
          kind: ImageStreamTag
          name: "postgresql:${POSTGRESQL_VERSION}"
          namespace: openshift
        lastTriggeredImage:
    - type: ConfigChange
    replicas: 1
    selector:
      name: "${SERVICE_PREFIX}-process-postgres"
    template:
      metadata:
        labels:
          name: "${SERVICE_PREFIX}-process-postgres"
      spec:
        containers:
        - name: postgresql
          image:
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            timeoutSeconds: 1
            initialDelaySeconds: 5
            exec:
              command:
              - "/bin/sh"
              - "-i"
              - "-c"
              - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c
                'SELECT 1'
          livenessProbe:
            timeoutSeconds: 1
            initialDelaySeconds: 30
            tcpSocket:
              port: 5432
          env:
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                name: "${SERVICE_PREFIX}-process-postgres"
                key: database-user
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "${SERVICE_PREFIX}-process-postgres"
                key: database-password
          - name: POSTGRESQL_DATABASE
            valueFrom:
              secretKeyRef:
                name: "${SERVICE_PREFIX}-process-postgres"
                key: database-name
          resources:
            limits:
              memory: "${MEMORY_LIMIT_POSTGRES}"
          volumeMounts:
          - name: vol-${SERVICE_PREFIX}-process-postgres
            mountPath: "/var/lib/pgsql/data"
          terminationMessagePath: "/dev/termination-log"
          imagePullPolicy: IfNotPresent
        volumes:
        - name: vol-${SERVICE_PREFIX}-process-postgres
          persistentVolumeClaim:
            claimName: pvc-${SERVICE_PREFIX}-process-postgres
        restartPolicy: Always
        dnsPolicy: ClusterFirst
- kind: Service
  apiVersion: v1
  metadata:
    name: "${SERVICE_PREFIX}-process-postgres"
  spec:
    ports:
    - name: postgresql
      protocol: TCP
      port: 5432
      targetPort: 5432
    selector:
      name: "${SERVICE_PREFIX}-process-postgres"
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: pvc-${SERVICE_PREFIX}-process-postgres
  spec:
    storageClassName: "${STORAGE_CLASS_NAME}"
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: "${VOLUME_CAPACITY_POSTGRES}"